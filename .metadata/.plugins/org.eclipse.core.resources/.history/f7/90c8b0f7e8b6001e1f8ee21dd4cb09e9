package examentcpudp_xavi;


import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

public class Servidor {
    public static void main(String[] args) {
        int puerto = 6000;

        try {
            ServerSocket servidor = new ServerSocket(puerto);
            System.out.println("Servidor esperando conexiones...");

            while (true) {
                Socket clienteConectado = servidor.accept();
                System.out.println("Nuevo cliente conectado.");

                // Crear un hilo para manejar la conexi√≥n
                Thread hiloCliente = new Thread(new ManejadorCliente(clienteConectado));
                hiloCliente.start();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

class ManejadorCliente implements Runnable {
    private Socket clienteConectado;

    public ManejadorCliente(Socket clienteConectado) {
        this.clienteConectado = clienteConectado;
    }

    @Override
    public void run() {
        try {
            DataInputStream flujoEntrada = new DataInputStream(clienteConectado.getInputStream());
            DataOutputStream flujoSalida = new DataOutputStream(clienteConectado.getOutputStream());

            // Recibiendo la primera cadena del cliente
            String cadena1 = flujoEntrada.readUTF();
            System.out.println("Cliente dice: " + cadena1);

            // Verificando la primera cadena
            if (cadena1.equals("hola")) {
                // Respondiendo a la primera cadena
                flujoSalida.writeUTF("hola");

                // Recibiendo la segunda cadena del cliente
                String cadena2 = flujoEntrada.readUTF();
                System.out.println("Cliente dice: " + cadena2);

                // Verificando la segunda cadena
                if (cadena2.equals("mundo")) {
                    // Respondiendo a la segunda cadena
                    flujoSalida.writeUTF("mon");
                } else {
                    // Si la segunda cadena no es "mundo", enviar un mensaje de error
                    flujoSalida.writeUTF("Error: Segunda cadena incorrecta");
                }
            } else {
                // Si la primera cadena no es "hola", enviar un mensaje de error
                flujoSalida.writeUTF("Error: Primera cadena incorrecta");
            }

            // Cerrando conexiones
            flujoEntrada.close();
            flujoSalida.close();
            clienteConectado.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
