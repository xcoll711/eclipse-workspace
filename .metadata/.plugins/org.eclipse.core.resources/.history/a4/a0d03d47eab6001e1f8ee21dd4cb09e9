package examentcpudp_xavi;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

public class Servidor {
    public static void main(String[] args) {
        int puerto = 6000;

        try (ServerSocket servidor = new ServerSocket(puerto)) {
            System.out.println("Servidor esperando conexiones...");

            while (true) {
                Socket clienteConectado = servidor.accept();
                System.out.println("Nuevo cliente conectado.");

                // Crear un hilo para manejar la conexi√≥n
                Thread hiloCliente = new Thread(new ManejadorCliente(clienteConectado));
                hiloCliente.start();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

class ManejadorCliente implements Runnable {
    private Socket clienteConectado;

    public ManejadorCliente(Socket clienteConectado) {
        this.clienteConectado = clienteConectado;
    }

    @Override
    public void run() {
        try {
            DataInputStream flujoEntrada = new DataInputStream(clienteConectado.getInputStream());
            DataOutputStream flujoSalida = new DataOutputStream(clienteConectado.getOutputStream());

            // Recibiendo la cadena del cliente
            String cadenaCliente = flujoEntrada.readUTF();
            System.out.println("Cliente dice: " + cadenaCliente);

            // Verificando la cadena del cliente
            if (cadenaCliente.contains("hola") && cadenaCliente.contains("mundo")) {
                // Respondiendo al cliente
                flujoSalida.writeUTF("hola mon");
            }

            // Cerrando conexiones
            flujoEntrada.close();
            flujoSalida.close();
            clienteConectado.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
